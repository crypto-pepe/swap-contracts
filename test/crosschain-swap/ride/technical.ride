{-# STDLIB_VERSION 6 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}

let SEPARATOR = "__"
let REWARD_COMPENSATION = 500000
let CLAIM_INTERVAL = 1440


func _saveReleaseTokens(
    executionChainId_: Int,
    executionAsset_: String,
    amount_: Int,
    recipient_: String,
    gaslessReward_: Int
) = {
    [StringEntry(
        "RELEASE_TOKENS",
        makeString([
            executionChainId_.toString(),
            executionAsset_,
            amount_.toString(),
            recipient_,
            gaslessReward_.toString()
        ], SEPARATOR)
    )]
}

@Callable(i)
func bigintToBinary(a_: Int) = {
    let _a = a_.toBigInt()
    (
        [
            BinaryEntry("BINARY_INT", _a.toBytes())
        ], unit
    )
}

@Callable(i)
func setMultisigParams(
    address_: String,
    txid_: String,
    isValid_: Boolean
) = {
    (
        [
            BooleanEntry("STATUS__" + address_ + SEPARATOR + txid_, isValid_)
        ], unit
    )
}

@Callable(i)
func resetMintData() = {
    (
        [
            IntegerEntry("MINT_AMOUNT", -1),
            StringEntry("WITNESS_1", ""),
            StringEntry("WITNESS_2", ""),
            StringEntry("WITNESS_3", ""),
            StringEntry("WITNESS_4", ""),
            StringEntry("WITNESS_5", "")
        ], unit
    )
}

@Callable(i)
func mintMany(
    amount_: Int,
    recipients_: List[String]
) = {
    let witnesses = if recipients_.size() == 1 then
            [
                StringEntry("WITNESS_1", recipients_[0])
            ]
        else if recipients_.size() == 2 then
            [
                StringEntry("WITNESS_1", recipients_[0]),
                StringEntry("WITNESS_2", recipients_[1])
            ]
        else if recipients_.size() == 3 then
            [
                StringEntry("WITNESS_1", recipients_[0]),
                StringEntry("WITNESS_2", recipients_[1]),
                StringEntry("WITNESS_3", recipients_[2])
            ]
        else if recipients_.size() == 4 then
            [
                StringEntry("WITNESS_1", recipients_[0]),
                StringEntry("WITNESS_2", recipients_[1]),
                StringEntry("WITNESS_3", recipients_[2]),
                StringEntry("WITNESS_4", recipients_[3])
            ]
        else if recipients_.size() == 5 then
            [
                StringEntry("WITNESS_1", recipients_[0]),
                StringEntry("WITNESS_2", recipients_[1]),
                StringEntry("WITNESS_3", recipients_[2]),
                StringEntry("WITNESS_4", recipients_[3]),
                StringEntry("WITNESS_5", recipients_[4])
            ]
        else
            []
    (
        witnesses ++
        [
            IntegerEntry("MINT_AMOUNT", amount_)
        ], unit
    )
}

@Callable(i)
func setEventConfirmationParams(
    chain_: Int,
    eid_: Int,
    isConfirmed_: Boolean
) = {
    (
        [
            BooleanEntry("EVENT__" + chain_.toString() + SEPARATOR + eid_.toString(), isConfirmed_)
        ], unit
    )
}

@Callable(i)
func isConfirmedEvent(
    eid_: Int,
    chain_: Int
) = {
    let ret = getBooleanValue("EVENT__" + chain_.toString() + SEPARATOR + eid_.toString())
    (
        [], ret
    )
}

@Callable(i)
func setEventType(
    chain_: Int,
    eid_: Int,
    eventType_: String
) = {
    (
        [
            StringEntry("EVENT_TYPE__" + chain_.toString() + SEPARATOR + eid_.toString(), eventType_)
        ], unit
    )
}

@Callable(i)
func setEventData(
    chain_: Int,
    eid_: Int,
    data_: String
) = {
    (
        [
            BinaryEntry("EVENT_BYTES__" + chain_.toString() + SEPARATOR + eid_.toString(), data_.fromBase16String())
        ], unit
    )
}

@Callable(i)
func getRawEvent(
    eid_: Int,
    chain_: Int
) = {
    let type = getStringValue("EVENT_TYPE__" + chain_.toString() + SEPARATOR + eid_.toString())
    let data = getBinaryValue("EVENT_BYTES__" + chain_.toString() + SEPARATOR + eid_.toString())
    (
        [], (type, data)
    )
}

@Callable(i)
func nothing() = {
    ([], unit)
}

@Callable(i)
func resetReleaseTokens() = {
    (
        [
            StringEntry("RELEASE_TOKENS", "")
        ], unit
    )
}

@Callable(i)
func releaseTokens(
    executionChainId_: Int,
    executionAsset_: String,
    amount_: Int,
    recipient_: String,
    gaslessReward_: Int
) = {
    (
        _saveReleaseTokens(
            executionChainId_,
            executionAsset_,
            amount_,
            recipient_,
            gaslessReward_
        ), unit
    )
}

@Verifier(tx)
func verify() = {
    sigVerify(tx.bodyBytes, tx.proofs[0], tx.senderPublicKey)
}
